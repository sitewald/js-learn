


	// Redux -------------------------
	
	// Самодостаточная библиотека - можно использовать и без React
	
	// Хранение глобальных данных приложения в одном месте ("глобальный объект") (не исключает
	// наличия у компонентов их личного state для внутренних нужд)
	
	// Единое место для всей логики изменения глобальных данных приложения - функция Reducer
	
	// Reducer и глобальный state - в Store (координирует обновления)
	
	// Компоненты инициируют изменение state через reducer, вызывая события, 
	// представленные объектами Action
	
	// Такая модель взаимодействия данных позволяет избежать property drill, когда
	// необходимо пробрасывать события по иерархии вложенных компонентов для изменения
	// state, хранящегося в главном компоненте приложения, а также,
	// при других архитектурах, fragemneted state, когда state распределён между
	// различными компонентами, что повышает вероятность неверной работы приложения
	
	npm install redux react-redux // react-redux упрощает интеграцию с React
	
	
	
	
	/* Reducer ****/
	
	// Обычная функция, которая принимает 2 агрумента - текущий state и action - любой объект,
	// который должен иметь свойство type
	
	// Если тип action неизвестен - должен вернуть state без изменений
	
	// Если текущий state === undefined - должен вернуть первоначальный (initial) state
	
	const reducer = (state, action) => {
		
		// Или можно задать параметр по умолчанию state = 0
		if (state === undefined) {
			return 0; // initial state
		}
		
		switch (action.type) {
			case 'INC' : 
				return state + 1; // Также, как в методе setState, state нельзя менять, нужно вернуть новый!
				
			default: return state;
		}
	}
	
	
	
	
	/* Redux Store ****/
	
	import { createStore } from 'redux';
	
	const store = createStore(reducer); // Создаём store
	
	store.subscribe(() => {             // Назначаем event handler для реакции на изменение state (получение нотификации об изменениях)
		console.log(store.getState());  // Получаем текущее состояние state
	});
	
	store.dispatch({ type: 'INC' }); // Вызываем изменение state путём передачи action
	store.dispatch({ type: 'INC' });
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	