
	
	//------------- Babel


	// Создание проекта без create-react-app
	
	// cmd:
	
	mkdir myproj
	
	cd myproj
	
	npm init
	
	// Чтобы создать проект, не отвечая на вопросы:
	
	npm init -y
	
	npm install --save-dev  @babel/core @babel/cli // --save-dev - библиотеки попадут в devDependencies (package.json),
												   // то есть они нужны только на этапе разработки. @babel - пространство имён
												 
	// Компиляция (транспиляция) js-кода, содержащего конструкции ES2015 в старый формат, понятный
	// всем браузерам:
	
	npx babel src --out-dir build // npx - утилита (execute). Указывается папка (src), где лежат исходные файлы
								  // и --out-dir указывает папку, куда надо положить результат (если папки нет - будет создана)
								  
	// Однако, без дополнительных модулей Babel не трансформирует код, поэтому файлы останутся без изменений
	
	// Эти модули - плагины, каждый отвечает за отдельную синтаксическую конструкцию языка.
	// Они устанавливаются как NPM пакеты:
	
	npm install --save-dev @babel/plugin-transform-template-literals // плагин для трансформации temlate-literal `hello ${name}`
																	 // в старую версию 'hello '.concat(name)
	
	// Запуск с плагинами:
	
	npx babel src --out-dir build --plugins plugin1,plugin2,plugin3 // плагины перечисляются через запятую
	
	// Информация о плагинах - на сайте babel (https://babeljs.io/docs/en/plugins)
	
	// Для того, чтобы не набирать каждый раз список плагинов в командной строке,
	// используется один из возможных конфигурационных файлов - .babelrc (json-файл - только двойные кавычки)
	// или babel.config.js (js-файл)
	
	// Синтаксис .babelrc
	
	{
		"plugins": [
			"@babel/plugin-transform-block-scoping",
			"@babel/plugin-transform-classes",
			"@babel/plugin-transform-template-literals"
		]
	}
	
	// babel сам при наличии конф. файла использует список плагинов при вызове:
	
	npx babel src --out-dir build
	
	/* Presets ***/
	
	// Для того, чтобы не прописывать все необходимые плагины, можно использовать preset (набор
	// плагинов стандартного назначения)
	
	npm install --save-dev @babel/preset-env // этот preset содержит все необходиме плагины для преобразования
										     // текущего стандарта языка в старый ES5 без экспериментальных (proposal)
											 // конструкций
											 
	// .babelrc
	
	{
		"presets": [ "@babel/preset-env" ]
	}
	
	// или сокращённо, без preset:
	
	{
		"presets": [ "@babel/env" ] // такое же сокращение можно применять и для плагинов:
									 // "plugins": [ "@babel/transform-classes" ]
	}
	
	// Можно использовать пресеты и плагины одновременно, например, если в пресете нет
	// каких-то экспериментальных конструкций:
	
	{
		"presets" : [ "@babel/env" ],
		"plugins": [ "@babel/proposal-class-properties" ]
	}
	
	// Иногда перевод всех конструкций кода в старый js бывает нецелесообразным, если
	// целевые браузеры новые - т.е. поддерживают ряд новых конструкций.
	// В таком случае нет смысла получать на выходе громоздкий код, а лучше ограничить
	// транспиляцию.
	
	// Для этого в babel-preset-env можно указать версии браузеров, ниже которых нет
	// смысла опускаться:
	
	{
		"presets": [
			[ // ---------------------- в случае, если пресету надо передать настройки, он передаётся
			  // ---------------------- в виде массива, где первый элемент - имя пресета, второй - объект настроек
				"@babel/env",
				{
					"targets": {
						"edge" : "18",   // есть синтаксис для динамического выбора версий браузера,
						"chrome" : "74"  // например, последних двух (см. документацию библиотеки browserslist.js)
					}
				}
			]
		]
	}
	
	/* Polyfills ****/
	
	// Помимо новых конструкций появляются новые функции в языке, которые могут быть не понятны браузеру
	
	// Polyfill - код, который добавляет глобальную функцию (если браузер её не понимает)
	
	npm install --save-dev core-js // библиотека полифиллов
	
	
	
	/* Для React ***/
	
	npm install --save-dev @babel/preset-react // пресет для работы с JSX
	
	// Итоговое содержимое .babelrc
	
	{
		"presets": [
		
			[ // ------------------------------ пресет с настройками передаём в виде массива
				"@babel/preset-env",
				{
					"corejs": "3.15.1", // установленная версия core-js (видна в package.json)
					
					"useBuiltIns": "usage", // подключить только нужные полифиллы (если в коде есть
										    // функции, непонятные браузеру). Значение "entry" - подключит все
											// полифиллы (неоптимальный вариант)
											
					"debug": true, // во время npx babel src --out-dir resultDir выведет в консоль дополнительную
								   // информацию, например о том, какие полифиллы были использованы
								   
					"modules": false // опция указывает на то, что модули не нужно транформировать
									 // (если в модулях используется инструкция import, она не будет трансформирована в require)
				}
			],
			
			"@babel/react" // ---------------- пресет для JSX
		]
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	